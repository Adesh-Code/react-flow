Conformiq


1. Xmlns:xsi to be added
2. Deleted is. used for deleted nodes
3. Decision nodes have:- 
    1. Condition : 
        1. ad:Expression 
        2. id is unique
        3. 
    2. Clause: 
        1. Ad:FunctionCallClause
        2. Id is unique
        3. methodRef
            1. External circumstances.
            2. True
            3. False


Clause:
1. Types
    1. ad:FunctionCallClause ( has methodRef )
        1. External_Circumstances.
        2. boolean
            2. True
            3. False 
            5. and ( creates multiple inputArgs )
            5. or ( creates multiple inputArgs )
            5. xor ( creates multiple inputArgs )
            4. not ( creates a inputArg )
            8. equals ( creates two inputArgs )
            8. notEquals ( creates two inputArgs )
            8. lessThan ( creates two inputArgs )
            8. lessThanOrEqual ( creates two inputArgs )
            8. greaterThan ( creates two inputArgs )
            8. greaterThanOrEqual ( creates two inputArgs )
            9. IsInitialized ( creates a inputArg )
        3. number
            1. add ( creates multiple inputArgs )
            2. subtract ( creates two inputArgs )
            2. divide ( creates two inputArgs )
            3. multiply ( creates multiple inputArgs )
            3. stringLength ( creates a inputArg )
        4. string
            5. concat ( creates multiple inputArgs )
            6. booleanToString ( creates a inputArg )
            7. dateToString ( creates a inputArg )
            8. numberToString ( creates a inputArg )
        
        
    2. ad:DateLiteralClause ( has value )
        1. Means days passed since Unix epoch. e.g 19993
    3. ad:NumberLiteralClause ( has value )
        1. Int value
    4. ad:StringLiteralCluase ( has value )
        1. String value

InputArgs:
1. Type: ad:Expression
2. 


Great now i have a heavy logic for you related to Decision Node, case_control Edge and else_control Edge.
In every decision object there can be a data property: the properties inside this data will have 
1.  name
2.  condition : {
        id: "ID",
        clause: {
            id: "ID",
            type: "TYPE",
            methodRef: 'METHOD',
            data: [
                {
                    id: "ID",
                    order: 1,
                    clause: {
                        id: "ID",
                        type: "TYPE",
                        methodRef: 'METHOD',
                        data: [...]
                    }
                },
                inputArgs: {
                    id: "ID",
                    order: 3,
                    clause: {
                        id: "ID",
                        type: "TYPE",
                        value: ""
                    }
                },
                inputArgs: {
                    id: "ID",
                    order: 2,
                    clause: {
                        id: "ID",
                        type: "TYPE",
                        methodRef: 'METHOD',
                        data: [...]
                    }
                },
                ...
            ]
        }
    }

Let me explain the condition object. There is clause in each condition. clause will have a type similar to how we had for edge and nodes: 
    function => ad:FunctionCallClause
    date => ad:DateLiteralClause
    number => ad:NumberLiteralClause
    string => ad:StringLiteralCluase

the clause will have list of inputArgs, in each inputArgs we will have clause as mentioned above. 
In each clause if the type is function then we will have methodRef and data attribute else we will have value attribute.
and the cycle continues until we have added all.

This is the example of the result for decision node specifically:
<nodes xmi:type="ad:DecisionNode" xmi:id="_kK9pgDPKEe-CXr1AUSTgQA" name="Verify registration" controlFlowsIn="_eO5MUDPNEe-CXr1AUSTgQA" caseControlFlowsOut="_DYdOADPQEe-CXr1AUSTgQA _WQDmIDPQEe-CXr1AUSTgQA">
      <condition xmi:type="ad:Expression" xmi:id="_kK-QkDPKEe-CXr1AUSTgQA">
        <clause xmi:type="ad:FunctionCallClause" xmi:id="_WrzBIGntEe-k0Ym48s7bMA" methodRef="concat">
          <inputArgs xmi:type="ad:Expression" xmi:id="_W-yOkGntEe-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_XPBC8GntEe-k0Ym48s7bMA" value="aasd"/>
          </inputArgs>
          <inputArgs xmi:type="ad:Expression" xmi:id="_Xre8gGntEe-k0Ym48s7bMA">
            <clause xmi:type="ad:FunctionCallClause" xmi:id="_Xre8gWntEe-k0Ym48s7bMA" methodRef="dateToString">
              <inputArgs xmi:type="ad:Expression" xmi:id="_Xre8gmntEe-k0Ym48s7bMA">
                <clause xmi:type="ad:DateLiteralClause" xmi:id="_YeoQsGntEe-k0Ym48s7bMA" value="19969"/>
              </inputArgs>
            </clause>
          </inputArgs>
          <inputArgs xmi:type="ad:Expression" xmi:id="_YCV9UGntEe-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_ZLIKUGntEe-k0Ym48s7bMA" value="asd"/>
          </inputArgs>
          <inputArgs xmi:type="ad:Expression" xmi:id="_ZwndAGntEe-k0Ym48s7bMA">
            <clause xmi:type="ad:FunctionCallClause" xmi:id="_ZwoEEGntEe-k0Ym48s7bMA" methodRef="numberToString">
              <inputArgs xmi:type="ad:Expression" xmi:id="_ZwoEEWntEe-k0Ym48s7bMA">
                <clause xmi:type="ad:FunctionCallClause" xmi:id="_ahPBoGntEe-k0Ym48s7bMA" methodRef="add">
                  <inputArgs xmi:type="ad:Expression" xmi:id="_a6nK8GntEe-k0Ym48s7bMA">
                    <clause xmi:type="ad:NumberLiteralClause" xmi:id="_bKKp4GntEe-k0Ym48s7bMA" value="asd"/>
                  </inputArgs>
                  <inputArgs xmi:type="ad:Expression" xmi:id="_bVgXMGntEe-k0Ym48s7bMA">
                    <clause xmi:type="ad:NumberLiteralClause" xmi:id="_bi-LcGntEe-k0Ym48s7bMA" value="asd"/>
                  </inputArgs>
                </clause>
              </inputArgs>
            </clause>
          </inputArgs>
        </clause>
      </condition>
    </nodes>


Business Activity:
    1. combinatorialStrength
    2. spreadsheet
    3. actions
        1. textualRendering -
            1. ad:BusinessActionLiteral ( has a value )
            2. ad:BusinessActionFieldRef ( has field )
    4. potentiallyDeletedFields
        type
    5. rows
        1. cells
            value
              clause

types:
    1. ad:WhenAction - In
    1. ad:ThenAction - Out
    1. ad:AndAction - In
    1. ad:GivenAction - In
    1. ad:NameTagBusinessAction - In Out
    1. ad:NarrativeBusinessAction - In Out


Great, now that you have understood the current progress. 
We want to add a simple logic for "Data" type of node, in each Data type of node there will be a data property. 
    in that data property we have following data:
        id: "ID",
        name: "label",
        actions: [
            {
                id: "ID",
                type: "TYPE",
                order: 1,
                value: [
                    {
                        id: "ID",
                        order: 1,
                        value: "val2",
                    },
                    {
                        id: "ID",
                        order: 2,
                        field: "KEY1",
                    },
                    {
                        id: "ID",
                        order: 3,
                        value: "val",
                    },
                ]
            },
            {
                id: "ID",
                type: "TYPE",
                order: 2,
                value: [
                    {
                        id: "ID",
                        order: 1,
                        value: "val2",
                    },
                ]
            },
            {
                id: "ID",
                type: "TYPE",
                order: 3,
                value: [
                    {
                        id: "ID",
                        order: 1,
                        value: "val5",
                    },
                ]
            },
        ],
        parameters: [
            {
                name: "param1",
                id: "ID",
                qmlID: "QMLID",
                kind: "Input",
                type: {
                    type: "TYPE",
                    id: "ID",
                    idRef: "String"
                }
            },
            {
                name: "param2",
                id: "ID",
                qmlID: "QMLID",
                kind: "Output",
                type: {
                    type: "TYPE",
                    id: "ID",
                    idRef: "String"
                }
            },
        ],
        rows: [
          {
            id: "ID",
            key: "KEY1",
            value: "val"
          },
          {
            id: "ID",
            key: "KEY2",
            value: "vals"
          }
        ]

I'll explain the things here, actions is a list of data. The type mentioned in each action will be out of following:
    when => ad:WhenAction
    then => ad:ThenAction
    and => ad:AndAction
    given => ad:GivenAction
    nameTag => ad:NameTagBusinessAction
    narrative => ad:NarrativeBusinessAction

    each action contains value which is a list of objects. each object contains an id and the value or field. 
    If the object contains field then it means it is an type of ad:BusinessActionFieldRef else ad:BusinessActionLiteral. Here the order matters for the array.

    <actions xmi:type="ad:WhenAction" xmi:id="_TML-UGn7Ee-k0Ym48s7bMA">
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_VFk28Wn9Ee-k0Ym48s0bMA" value="Hey, "/>
        <textualRendering xmi:type="ad:BusinessActionFieldRef" xmi:id="_VFk28Gn9Ee-k0Ym48s7bMA" field="_Hlq8QGn9Ee-k0Ym48s7bMA"/>
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_VFk28Wn9Ee-k0Ym48s7bMA" value="Build Page is performed andss"/>
      </actions>

each parameters are tagged as potentiallyDeletedFields in the xml. The name is used for name. 
    kind is either "Input" or "Output". If input then do not mentione kind in the xml. e.g.
    <potentiallyDeletedFields xmi:type="ad:BusinessField" xmi:id="_ryUfMGn-Ee-k0Ym48s7bMA" name="aa" qmlId="qml4291dcfe30c24e12b44bf0fedba8e60e">
        <type xmi:type="ad:CustomTypeRef" xmi:id="_ryUfMWn-Ee-k0Ym48s7bMA" idRef="String"/>
    </potentiallyDeletedFields>

each rows are tagged as rows. The amount of cells is based on total number of parameters. 
Their association is done using key of the cell and the id of the parameter. the value is then stored in value tag. other id's are generated randomly. e.g.
<rows xmi:type="ad:BusinessRow" xmi:id="_FCCh4Gn9Ee-k0Ym48s7bMA">
        <cells xmi:type="ad:BusinessCell" xmi:id="_ryUfMmn-Ee-k0Ym48s7bMA" key="_ryUfMGn-Ee-k0Ym48s7bMA">
          <value xmi:type="ad:Expression" xmi:id="_ryUfM2n-Ee-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_xPB_gGn-Ee-k0Ym48s7bMA" value="d"/>
          </value>
        </cells>
        <cells xmi:type="ad:BusinessCell" xmi:id="_IxQlomn9Ee-k0Ym48s7bMA" key="_IxQloGn9Ee-k0Ym48s7bMA">
          <value xmi:type="ad:Expression" xmi:id="_IxQlo2n9Ee-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_Qyf4MGn9Ee-k0Ym48s7bMA" value="s"/>
          </value>
        </cells>
      </rows>

We have following complete output result :

<nodes xmi:type="ad:BusinessActivityNode" xmi:id="_du25ADPbEe-CXr1AUSTgQA" name="Build Page" controlFlowsIn="_mK9OgDPOEe-CXr1AUSTgQA" controlFlowsOut="_iDR7kDPbEe-CXr1AUSTgQA">
      <actions xmi:type="ad:WhenAction" xmi:id="_TML-UGn7Ee-k0Ym48s7bMA">
        <textualRendering xmi:type="ad:BusinessActionFieldRef" xmi:id="_VFk28Gn9Ee-k0Ym48s7bMA" field="_Hlq8QGn9Ee-k0Ym48s7bMA"/>
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_VFk28Wn9Ee-k0Ym48s7bMA" value="Build Page is performed andss"/>
      </actions>
      <actions xmi:type="ad:ThenAction" xmi:id="_TML-Umn7Ee-k0Ym48s7bMA">
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_TML-U2n7Ee-k0Ym48s7bMA" value="Build Page completes"/>
      </actions>
      <actions xmi:type="ad:GivenAction" xmi:id="_xFa34Gn7Ee-k0Ym48s7bMA">
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_0SPZMGn7Ee-k0Ym48s7bMA" value="Afsss"/>
      </actions>
      <actions xmi:type="ad:AndAction" xmi:id="_xfRiUGn7Ee-k0Ym48s7bMA">
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_07i04Gn7Ee-k0Ym48s7bMA" value="asdasd"/>
      </actions>
      <actions xmi:type="ad:NameTagBusinessAction" xmi:id="_x4cQQGn7Ee-k0Ym48s7bMA">
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_2ghOoGn7Ee-k0Ym48s7bMA" value="aasda"/>
      </actions>
      <actions xmi:type="ad:NarrativeBusinessAction" xmi:id="_yHeKwGn7Ee-k0Ym48s7bMA">
        <textualRendering xmi:type="ad:BusinessActionLiteral" xmi:id="_3EkW4Gn7Ee-k0Ym48s7bMA" value="asdasd"/>
      </actions>
      <potentiallyDeletedFields xmi:type="ad:BusinessField" xmi:id="_ryUfMGn-Ee-k0Ym48s7bMA" name="aa" qmlId="qml4291dcfe30c24e12b44bf0fedba8e60e">
        <type xmi:type="ad:CustomTypeRef" xmi:id="_ryUfMWn-Ee-k0Ym48s7bMA" idRef="String"/>
      </potentiallyDeletedFields>
      <potentiallyDeletedFields xmi:type="ad:BusinessField" xmi:id="_Hlq8QGn9Ee-k0Ym48s7bMA" name="aa" qmlId="qml6da7b15bb32441d4941238909a7cdc73" deleted="true">
        <type xmi:type="ad:CustomTypeRef" xmi:id="_Hlq8QWn9Ee-k0Ym48s7bMA" idRef="String"/>
      </potentiallyDeletedFields>
      <potentiallyDeletedFields xmi:type="ad:BusinessField" xmi:id="_IxQloGn9Ee-k0Ym48s7bMA" name="sdsa" qmlId="qml54d22e50dbb247b485e4de26854d4bbf" kind="Output">
        <type xmi:type="ad:CustomTypeRef" xmi:id="_IxQloWn9Ee-k0Ym48s7bMA" idRef="String"/>
      </potentiallyDeletedFields>
      <combinatorialStrength xmi:type="ad:Expression" xmi:id="_du25ATPbEe-CXr1AUSTgQA"/>
      <rows xmi:type="ad:BusinessRow" xmi:id="_FCCh4Gn9Ee-k0Ym48s7bMA">
        <cells xmi:type="ad:BusinessCell" xmi:id="_ryUfMmn-Ee-k0Ym48s7bMA" key="_ryUfMGn-Ee-k0Ym48s7bMA">
          <value xmi:type="ad:Expression" xmi:id="_ryUfM2n-Ee-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_xPB_gGn-Ee-k0Ym48s7bMA" value="d"/>
          </value>
        </cells>
        <cells xmi:type="ad:BusinessCell" xmi:id="_IxQlomn9Ee-k0Ym48s7bMA" key="_IxQloGn9Ee-k0Ym48s7bMA">
          <value xmi:type="ad:Expression" xmi:id="_IxQlo2n9Ee-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_Qyf4MGn9Ee-k0Ym48s7bMA" value="s"/>
          </value>
        </cells>
      </rows>
      <rows xmi:type="ad:BusinessRow" xmi:id="_wzer8Gn-Ee-k0Ym48s7bMA">
        <cells xmi:type="ad:BusinessCell" xmi:id="_wzer8Wn-Ee-k0Ym48s7bMA" key="_ryUfMGn-Ee-k0Ym48s7bMA">
          <value xmi:type="ad:Expression" xmi:id="_wzer8mn-Ee-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_xkq4UGn-Ee-k0Ym48s7bMA" value="q"/>
          </value>
        </cells>
        <cells xmi:type="ad:BusinessCell" xmi:id="_wzer82n-Ee-k0Ym48s7bMA" key="_IxQloGn9Ee-k0Ym48s7bMA">
          <value xmi:type="ad:Expression" xmi:id="_wzer9Gn-Ee-k0Ym48s7bMA">
            <clause xmi:type="ad:StringLiteralClause" xmi:id="_y9gTgGn-Ee-k0Ym48s7bMA" value="q"/>
          </value>
        </cells>
      </rows>
      <spreadsheet xmi:type="ad:Expression" xmi:id="_du25AjPbEe-CXr1AUSTgQA"/>
    </nodes>



Variable Node:
  type: ad:VariableDataObject
  id
  name
  visibility
  qmlID
  idRef: PrimitiveDataType -> type

{
    id: "ID",
    type: Node.Variable,
    data: {
        name: "",
        errorMessages: [],
        visibility: Visibility.Global,
        qmlId: "",
        type: PrimitiveDataType.String,
    },
    position: {
        x: 10,
        y: 80,
    },
}

Activity Node:
  id
  name
  
  actions: 
    type: ad:ActionInvocation
    id
    methodRef: TYPE
    inputArgs:
      (order)
      clause:
        type
        methodRef
    outputLocation?:
      objectRef:



enum ActionType {
  EvaluateBoolean: "evaluateBoolean",
  EvaluateInt: "evaluateInt",
  EvaluateDate: "evaluateDate",
  EvaluateString: "evaluateString",
  Narrative: "narrative",
  NameTag: "nameTag",
  CallSubActivity: "callSubActivity",
}

{
    id: "ID",
    type: Node.Activity,
    data: {
        name: "",
        errorMessages: [],
        actions: [
          {
            id: "ID",
            methodRef: ActionType.EvaluateBoolean,
            objectRef: "",
            data: [
              {
                id: "inputArg6",
                order: 1,
                clause: {
                  id: "clause7",
                  type: Clause.Function,
                  methodRef: FunctionClause.Equals,
                  data: [
                    {
                      id: "inputArg11",
                      order: 1,
                      clause: {
                        id: "clause19",
                        type: Clause.Function,
                        methodRef: FunctionClause.True
                      }
                    },
                    {
                      id: "inputArg13",
                      order: 2,
                      clause: {
                        id: "clause18",
                        type: Clause.Function,
                        methodRef: FunctionClause.False
                      }
                    }
                  ]
                }
              },
            ]
          },
          {
            id: "ID",
            methodRef: ActionType.NameTag,
            data: [
              {
                id: "inputArg3",
                order: 1,
                clause: {
                  id: "clause10",
                  type: Clause.String,
                  value: "aher",
                }
              }
            ]
          }
        ]
    },
    position: {
        x: 10,
        y: 80,
    },
}

If the type is EvaluateBoolean, EvaluateDate, EvaluateInt, EvaluateString then there is extra property as objectRef. 
In the first data list directly under action there will be only one entry for inputArg. 
There can be multiple entries for inputArgs in the next data lists. can this is also recursive.